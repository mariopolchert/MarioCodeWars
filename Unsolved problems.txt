function validSolution(b) {
    // firstCondition
    let firstCondition = b.every((l) =>
        l.every((n) => n !== 0 && [1, 2, 3, 4, 5, 6, 7, 8, 9].includes(n))
    );
    // secondCondition
    let obj = {};
    for (let line of b) {
        for (let i = 0; i < 9; i++) {
            obj[i] ? obj[i].push(line[i]) : (obj[i] = [line[i]]);
        }
    }
    let v = Object.values(obj);
    let secondCondition = v.every((l) =>
        l.every((n) => n !== 0 && [1, 2, 3, 4, 5, 6, 7, 8, 9].includes(n))
    );
    // third condition
    let obj3 = {};
    let counter = 3;
    for (let j = 0; j < 9; j++) {
        for (let i = 0; i < 3; i++) {
            obj3[j]
                ? obj[j].push(b[j].splice(0, 3))
                : (obj3[j] = [...b[j].splice(0, 3)]);
            // console.log(line.splice(0, 3));
        }
        counter++;
    }

    console.log(obj3);
    // console.log(b);
    // final result
    return firstCondition && secondCondition;
}

console.log(
    validSolution([
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [2, 3, 1, 5, 6, 4, 8, 9, 7],
        [3, 1, 2, 6, 4, 5, 9, 7, 8],
        [4, 5, 6, 7, 8, 9, 1, 2, 3],
        [5, 6, 4, 8, 9, 7, 2, 3, 1],
        [6, 4, 5, 9, 7, 8, 3, 1, 2],
        [7, 8, 9, 1, 2, 3, 4, 5, 6],
        [8, 9, 7, 2, 3, 1, 5, 6, 4],
        [9, 7, 8, 3, 1, 2, 6, 4, 5],
    ])
); // false

//expected true to equal false

// console.log(
//     validSolution([
//         [5, 3, 4, 6, 7, 8, 9, 1, 2],
//         [6, 7, 2, 1, 9, 5, 3, 4, 8],
//         [1, 9, 8, 3, 4, 2, 5, 6, 7],
//         [8, 5, 9, 7, 6, 1, 4, 2, 3],
//         [4, 2, 6, 8, 5, 3, 7, 9, 1],
//         [7, 1, 3, 9, 2, 4, 8, 5, 6],
//         [9, 6, 1, 5, 3, 7, 2, 8, 4],
//         [2, 8, 7, 4, 1, 9, 6, 3, 5],
//         [3, 4, 5, 2, 8, 6, 1, 7, 9],
//     ])
// ); //   true

// console.log(
//     validSolution([
//         [5, 3, 4, 6, 7, 8, 9, 1, 2],
//         [6, 7, 2, 1, 9, 0, 3, 4, 8],
//         [1, 0, 0, 3, 4, 2, 5, 6, 0],
//         [8, 5, 9, 7, 6, 1, 0, 2, 0],
//         [4, 2, 6, 8, 5, 3, 7, 9, 1],
//         [7, 1, 3, 9, 2, 4, 8, 5, 6],
//         [9, 0, 1, 5, 3, 7, 2, 1, 4],
//         [2, 8, 7, 4, 1, 9, 6, 3, 5],
//         [3, 0, 0, 4, 8, 1, 1, 7, 9],
//     ])
// ); //    false

// function validSolution(b) {
//     return b.every((l) =>
//         l.every((n) => n !== 0 && [1, 2, 3, 4, 5, 6, 7, 8, 9].includes(n))
//     );
// }

// const a = [5, 3, 4, 6, 7, 8, 9, 1, 2];
// const sl = a.slice(3);
// console.log(a);
// const sl2 = a.slice(3);
// console.log(a);
// console.log(sl);
// console.log(sl2);
//******************************************************************************
Decode the morse code 6
const a = {
    ".-": "A",
    "-...": "B",
    "-.-.": "C",
    "-..": "D",
    ".": "E",
    "..-.": "F",
    "--.": "G",
    "....": "H",
    "..": "I",
    ".---": "J",
    "-.-": "K",
    ".-..": "L",
    "--": "M",
    "-.": "N",
    "---": "O",
    ".--.": "P",
    "--.-": "Q",
    ".-.": "R",
    "...": "S",
    "-": "T",
    "..-": "U",
    ".--": "W",
    "-..-": "X",
    "-.--": "Y",
    "--..": "Z",
};

const decodeMorse = function (m) {
    return m
        .split(/\s{2,}/)
        .map((e) =>
            e
                .split(" ")
                .map((l) => {
                    return a[l] ? a[l] : l;
                })
                .join("")
        )
        .join(" ");
};


console.log(decodeMorse(".... . -.--   .--- ..- -.. .")); // 'HEY JUDE'

// Got ' ', expected 'SOS'
// Got 'S O  S', expected 'S O S'
// Got ' E ', expected 'E'
// Got '  E  E ', expected 'E E'
// Got '         THE  QUICK  BROWN  FOX  JUMPS  O ER  THE  LAZY  DOG   ', expected 'SOS! THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'
// last problems
// Got '...---...', expected 'SOS'
// Got ' E E', expected 'E E'
// Got ' ...---...-.-.-- THE QUICK BROWN FOX JUMPS O...-ER THE LAZY DOG.-.-.- ', expected 'SOS! THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'
//*********************************************************************************
// Enough is Enough
// Given a list and a number, create a new list that contains each number of list at most N times, without reordering.
// For example if the input number is 2, and the input list is [1,2,3,1,2,1,2,3], you take [1,2,3,1,2], drop the next [1,2] since this would lead to 1 and 2 being in the result 3 times, and then take 3, which leads to [1,2,3,1,2,3].
// With list [20,37,20,21] and number 1, the result would be [20,37,21].

function deleteNth(arr, n) {
    let obj = {};
    let result = arr
        .map((e) => {
            return obj[e] && obj[e] <= n ? (obj[e] += 1) : (obj[e] = 1);
        })
        .filter((e) => {
            obj[e] < n;
        });
    console.log(obj);
    return result;
}

console.log(deleteNth([20, 37, 20, 21], 1)); // [20,37,21]
console.log(deleteNth([1, 2, 3, 1, 2, 1, 2, 3], 2)); // [1,2,3,1,2,3]
console.log(deleteNth([1, 1, 3, 3, 7, 2, 2, 2, 2], 3)); // [1, 1, 3, 3, 7, 2, 2, 2]

//------------------------------------------------------------------------------------
// 5 kyu   Weight for weight
// For example 99 will have "weight" 18, 100 will have "weight" 1 so in the list 100 will come before 99.
// Example:
// "56 65 74 100 99 68 86 180 90" ordered by numbers weights becomes:
// "100 180 90 56 65 74 68 86 99"
// When two numbers have the same "weight", let us class them as if they were strings (alphabetical ordering) and not numbers:
// 180 is before 90 since, having the same "weight" (9), it comes before as a string.
// All numbers in the list are positive numbers and the list can be empty.

function sumOfDigits(n) {
    // return Array.from(n.split("")).reduce((a, c) => +a + c, 0);
    // let numbers = Array.from(n.split(""));
    return Array.from(n.split("")).reduce((a, c) => Number(a) + Number(c), 0);
}

function orderWeight(s) {
    s = s.split(/\s+/);
    let result = s.sort((a, b) => sumOfDigits(a) - sumOfDigits(b)).join(" ");
    result = result
        .split(" ")
        .sort(
            (a, b) =>
                a.localeCompare(b, undefined, {
                    numeric: true,
                }) -
                b.localeCompare(a, undefined, {
                    numeric: true,
                })
        )
        .join(" ");
    console.log("result   ", result);

    // let numbers = s.sort((a, b) => sumOfDigits(a) - sumOfDigits(b));
    // // console.log(numbers.sort((a, b) => a - b));
    // return numbers.sort((a, b) => a - b).join(" ");
    // return s.sort((a, b) => sumOfDigits(a) - sumOfDigits(b)).join(" ");
    // return result
    //     .split(" ")
    //     .sort((a, b) => a - b)
    //     .join(" ");
}

// console.log(orderWeight("103 123 4444 99 2000")); // "2000 103 123 4444 99"
// console.log(orderWeight("56 65 74 100 99 68 86 180 90")); // "100 180 90 56 65 74 68 86 99"
console.log(orderWeight("2000 10003 1234000 44444444 9999 11 11 22 123")); // "11 11 2000 10003 22 123 1234000 44444444 9999"

// console.log(sumOfDigits("103"));
//-------------------------------------------------------------------------------------

// 4 kyu   Sum Strings as Numbers
// Given the string representations of two integers, return the string representation of the sum of those integers.
// sumStrings('1','2') // => '3'
// A string representation of an integer will contain no characters besides the ten numerals "0" to "9".

// function sumStrings(a, b) {
//     // return (BigInt(parseInt(a)) + BigInt(parseInt(b))).toString();
//     return (BigInt(a.toString()) + BigInt(b.toString())).toString();
// }

// console.log(sumStrings("123", "456")); // '579'
// console.log(
//     sumStrings("712569312664357328695151392", "8100824045303269669937")
// ); // expected '7.125774134884027e+26' to equal '712577413488402631964821329'
//--------------------------------------------------------------------------------------------------------------
// 4 kyu  The observed PIN
// 2400458
// ┌───┬───┬───┐
// │ 1 │ 2 │ 3 │
// ├───┼───┼───┤
// │ 4 │ 5 │ 6 │
// ├───┼───┼───┤
// │ 7 │ 8 │ 9 │
// └───┼───┼───┘
//     │ 0 │
//     └───┘

// He noted the PIN 1357, but he also said, it is possible that each of the digits he saw could actually be another adjacent digit (horizontally or vertically, but not diagonally). E.g. instead of the 1 it could also be the 2 or 4. And instead of the 5 it could also be the 2, 4, 6 or 8.
// He also mentioned, he knows this kind of locks. You can enter an unlimited amount of wrong PINs, they never finally lock the system or sound the alarm. That's why we can try out all possible (*) variations.
// * possible in sense of: the observed PIN itself and all variations considering the adjacent digits
// Can you help us to find all those variations? It would be nice to have a function, that returns an array (or a list in Java/Kotlin and C#) of all variations for an observed PIN with a length of 1 to 8 digits. We could name the function getPINs (get_pins in python, GetPINs in C#). But please note that all PINs, the observed one and also the results, must be strings, because of potentially leading '0's. We already prepared some test cases for you.
// Detective, we are counting on you!

function getPINs(observed) {
    const pins = {
        0: ["0", "8"],
        1: ["1", "2", "4"],
        2: ["1", "2", "3", " 5"],
        3: ["2", "3", "6"],
        4: ["1", "4", "5", "7"],
        5: ["2", "4", "5", "6", "8"],
        6: ["3", "5", "6", "9"],
        7: ["4", "7", "8"],
        8: ["5", "7", "8", "9", "0"],
        9: ["6", "8", "9"],
    };
    let obsArr = observed.split("");
    for()
    return obsArr;
}

console.log(getPINs("8")); // ["5", "7", "8", "9", "0"],
console.log(getPINs("11")); //["11", "22", "44", "12", "21", "14", "41", "24", "42"],
console.log(getPINs("369")); // ["339","366","399","658","636","258","268","669","668","266","369","398","256","296","259","368","638","396","238","356","659","639","666","359","336","299","338","696","269","358","656","698","699","298","236","239"]